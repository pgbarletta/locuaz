import re
import zipfile
from pathlib import Path


def extract_pdbs(zip_file: Path, out_prefix: str):
    """
    zip_file: zip file with a bunch of PDBs named "output{i}.pdb" generated by trjconv
    Extracts the zip file and fixes the PDBs
    """
    zip_file = Path(zip_file)
    current_dir = zip_file.parent
    zipped_pdbs = zipfile.ZipFile(zip_file)
    regex_get_number = r"\d+"
    nframes = max(
        [
            int(re.findall(regex_get_number, nombre.filename)[0])
            for nombre in zipped_pdbs.filelist
        ]
    )

    with zipped_pdbs as sipesipe:
        sipesipe.extractall(current_dir)

    proto_pdb = str(current_dir / "output")
    fixed_pdb = str(current_dir / (out_prefix + "-"))
    for i in range(0, nframes + 1):
        old_pdb = Path(proto_pdb + str(i) + ".pdb")
        new_pdb = fixed_pdb + str(i) + ".pdb"
        fix_gromacs_pdb(old_pdb, new_pdb)
        old_pdb.unlink()

    return nframes


# It'd be nice to replace this with a proper PDB library
def fix_gromacs_pdb(file_in_str, file_out_str):
    with open(file_in_str, "r") as sources:
        lines = sources.readlines()
    with open(file_out_str, "w") as sources:
        prev_line = "ATOM      X  XX  XYZ A"
        for line in lines:
            if line[0:6] == "TITLE " or line[0:6] == "REMARK" or line[0:6] == "CRYST1":
                continue
            # Add 'TER' between chains.
            if line[0:4] == "ATOM" and prev_line[0:5] != "MODEL":
                if line[21:22] != prev_line[21:22]:
                    sources.write("TER\n")

            linea = re.sub(
                r"CD  ILE",
                "CD1 ILE",
                re.sub(
                    r"OC2", "OXT", re.sub(r"OC1", "O  ", re.sub(r"HI.", "HIS", line))
                ),
            )
            sources.write(linea)

            prev_line = line
        sources.write("END")


def pdb_chain_segid(file_in_str, file_out_str):
    with open(file_in_str, "r") as sources:
        lines = sources.readlines()
    with open(file_out_str, "w") as sources:
        for linea in lines:
            if linea[0:4] == "ATOM":
                line = linea[0:72] + linea[21] + linea[73:]
            else:
                line = linea
            sources.write(line)
