!$Revision: 1.0 $
!$Date: 2003/02/19 08:14:08 $
!$RCSfile: symdimer.cns,v $

! Define NCS restraints for symmetrical multimers
if ($Data.flags.ncs eq true) then

  ncs restraints
    initialize
    eval ($ncount = 0)
    while ($ncount < $data.numncs) loop ncsloop
      eval ($ncount = $ncount + 1)
      group
        equi (resid $Toppar.ncs_sta1_$ncount : $Toppar.ncs_end1_$ncount and segid $Toppar.ncs_seg1_$ncount)
        equi (resid $Toppar.ncs_sta2_$ncount : $Toppar.ncs_end2_$ncount and segid $Toppar.ncs_seg2_$ncount)
	weight = $Data.kncs
      end
    end loop ncsloop
    ?
  end

end if

! Define C2 symmetry restraints for symmetrical multimers
!
if ($Data.flags.sym eq true) then

  noe class symm end

  eval ($ncount = 0)
  while ($ncount < $data.numc2sym) loop c2symloop

    eval ($ncount = $ncount + 1)
    evaluate ($i1start = decode($Toppar.c2sym_sta1_$ncount))
    evaluate ($i1end   = decode($Toppar.c2sym_end1_$ncount))
    evaluate ($chain1  = $Toppar.c2sym_seg1_$ncount)
    evaluate ($i2start = decode($Toppar.c2sym_sta2_$ncount))
    evaluate ($i2end   = decode($Toppar.c2sym_end2_$ncount))
    evaluate ($chain2  = $Toppar.c2sym_seg2_$ncount)

    !first check that the chain lengths are equal for the two defined molecules
    evaluate ($diff1 = $i1end - $i1start)
    evaluate ($diff2 = $i2end - $i2start)
    if ($diff1 ne $diff2) then
      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH
      display PLEASE CHECK CAREFULLY YOUR INPUT
      display ... stopping ...
      stop
    end if

    eval ($icount = 0)
    while ($i1start < $i1end) loop genc2sym

      evaluate ($resid1 = $i1start)
      evaluate ($resid2 = $i2end - $icount)
      evaluate ($resid3 = $i2start)
      evaluate ($resid4 = $i1end - $icount)

      noe
	assign (resid $resid1 and name CA  and segid $chain1)
	       (resid $resid2 and name CA  and segid $chain2) 0 0 0
	assign (resid $resid3 and name CA  and segid $chain2)
	       (resid $resid4 and name CA  and segid $chain1) 0 0 0
      end 

      evaluate ($icount = $icount + 1)
      evaluate ($i1start = $i1start + 1)
      evaluate ($i2start = $i2start + 1)

    end loop genc2sym

  end loop c2symloop


! Define C3 symmetry restraints for symmetrical multimers
!

  eval ($ncount = 0)
  while ($ncount < $data.numc3sym) loop c3symloop

    eval ($ncount = $ncount + 1)
    evaluate ($i1start = decode($Toppar.c3sym_sta1_$ncount))
    evaluate ($i1end   = decode($Toppar.c3sym_end1_$ncount))
    evaluate ($chain1  = $Toppar.c3sym_seg1_$ncount)
    evaluate ($i2start = decode($Toppar.c3sym_sta2_$ncount))
    evaluate ($i2end   = decode($Toppar.c3sym_end2_$ncount))
    evaluate ($chain2  = $Toppar.c3sym_seg2_$ncount)
    evaluate ($i3start = decode($Toppar.c3sym_sta3_$ncount))
    evaluate ($i3end   = decode($Toppar.c3sym_end3_$ncount))
    evaluate ($chain3  = $Toppar.c3sym_seg3_$ncount)

    !first check that the chain lengths are equal for the two defined molecules
    evaluate ($diff1 = $i1end - $i1start)
    evaluate ($diff2 = $i2end - $i2start)
    evaluate ($diff3 = $i3end - $i3start)
    if ($diff1 ne $diff2) then
      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH
      display PLEASE CHECK CAREFULLY YOUR INPUT
      display ... stopping ...
      stop
    end if
    if ($diff1 ne $diff3) then
      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH
      display PLEASE CHECK CAREFULLY YOUR INPUT
      display ... stopping ...
      stop
    end if
    if ($diff2 ne $diff3) then
      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH
      display PLEASE CHECK CAREFULLY YOUR INPUT
      display ... stopping ...
      stop
    end if

    eval ($icount = 0)
    while ($i1start < $i1end) loop genc3sym

      evaluate ($resst1 = $i1start)
      evaluate ($resst2 = $i2start)
      evaluate ($resst3 = $i3start)
      evaluate ($resen1 = $i1end - $icount)
      evaluate ($resen2 = $i2end - $icount)
      evaluate ($resen3 = $i3end - $icount)

      noe

         assign (resid $resst1 and name CA  and segid $chain1)
                (resid $resen2 and name CA  and segid $chain2) 0 0 0
         assign (resid $resst2 and name CA  and segid $chain2)
                (resid $resen3 and name CA  and segid $chain3) 0 0 0

         assign (resid $resst2 and name CA  and segid $chain2)
                (resid $resen3 and name CA  and segid $chain3) 0 0 0
         assign (resid $resst3 and name CA  and segid $chain3)
                (resid $resen1 and name CA  and segid $chain1) 0 0 0

         assign (resid $resst3 and name CA  and segid $chain3)
                (resid $resen1 and name CA  and segid $chain1) 0 0 0
         assign (resid $resst1 and name CA  and segid $chain1)
                (resid $resen2 and name CA  and segid $chain2) 0 0 0

      end 

      evaluate ($icount = $icount + 2)
      evaluate ($i1start = $i1start + 2)
      evaluate ($i2start = $i2start + 2)
      evaluate ($i3start = $i3start + 2)

    end loop genc3sym

  end loop c3symloop

! Define C5 symmetry restraints for symmetrical multimers
!

  eval ($ncount = 0)
  while ($ncount < $data.numc5sym) loop c5symloop

    eval ($ncount = $ncount + 1)
    evaluate ($i1start = decode($Toppar.c5sym_sta1_$ncount))
    evaluate ($i1end   = decode($Toppar.c5sym_end1_$ncount))
    evaluate ($chain1  = $Toppar.c5sym_seg1_$ncount)
    evaluate ($i2start = decode($Toppar.c5sym_sta2_$ncount))
    evaluate ($i2end   = decode($Toppar.c5sym_end2_$ncount))
    evaluate ($chain2  = $Toppar.c5sym_seg2_$ncount)
    evaluate ($i3start = decode($Toppar.c5sym_sta3_$ncount))
    evaluate ($i3end   = decode($Toppar.c5sym_end3_$ncount))
    evaluate ($chain3  = $Toppar.c5sym_seg3_$ncount)
    evaluate ($i4start = decode($Toppar.c5sym_sta4_$ncount))
    evaluate ($i4end   = decode($Toppar.c5sym_end4_$ncount))
    evaluate ($chain4  = $Toppar.c5sym_seg4_$ncount)
    evaluate ($i5start = decode($Toppar.c5sym_sta5_$ncount))
    evaluate ($i5end   = decode($Toppar.c5sym_end5_$ncount))
    evaluate ($chain5  = $Toppar.c5sym_seg5_$ncount)

    !first check that the chain lengths are equal for the two defined molecules
    evaluate ($diff1 = $i1end - $i1start)
    evaluate ($diff2 = $i2end - $i2start)
    evaluate ($diff3 = $i3end - $i3start)
    evaluate ($diff4 = $i4end - $i4start)
    evaluate ($diff5 = $i5end - $i5start)
    if ($diff1 ne $diff2) then
      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH
      display PLEASE CHECK CAREFULLY YOUR INPUT
      display ... stopping ...
      stop
    end if
    if ($diff1 ne $diff3) then
      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH
      display PLEASE CHECK CAREFULLY YOUR INPUT
      display ... stopping ...
      stop
    end if
    if ($diff2 ne $diff3) then
      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH
      display PLEASE CHECK CAREFULLY YOUR INPUT
      display ... stopping ...
      stop
    end if
    if ($diff3 ne $diff4) then
      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH
      display PLEASE CHECK CAREFULLY YOUR INPUT
      display ... stopping ...
      stop
    end if
    if ($diff4 ne $diff5) then
      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH
      display PLEASE CHECK CAREFULLY YOUR INPUT
      display ... stopping ...
      stop
    end if

    eval ($icount = 0)
    while ($i1start < $i1end) loop genc5sym

      evaluate ($resst1 = $i1start)
      evaluate ($resst2 = $i2start)
      evaluate ($resst3 = $i3start)
      evaluate ($resst4 = $i4start)
      evaluate ($resst5 = $i5start)
      evaluate ($resen1 = $i1end - $icount)
      evaluate ($resen2 = $i2end - $icount)
      evaluate ($resen3 = $i3end - $icount)
      evaluate ($resen4 = $i4end - $icount)
      evaluate ($resen5 = $i5end - $icount)

      noe
{
         assign (resid $resst1 and name CA  and segid $chain1)
                (resid $resen2 and name CA  and segid $chain2) 0 0 0
         assign (resid $resst2 and name CA  and segid $chain2)
                (resid $resen3 and name CA  and segid $chain3) 0 0 0

         assign (resid $resst2 and name CA  and segid $chain2)
                (resid $resen3 and name CA  and segid $chain3) 0 0 0
         assign (resid $resst3 and name CA  and segid $chain3)
                (resid $resen4 and name CA  and segid $chain4) 0 0 0

         assign (resid $resst3 and name CA  and segid $chain3)
                (resid $resen4 and name CA  and segid $chain4) 0 0 0
         assign (resid $resst4 and name CA  and segid $chain4)
                (resid $resen5 and name CA  and segid $chain5) 0 0 0

         assign (resid $resst4 and name CA  and segid $chain4)
                (resid $resen5 and name CA  and segid $chain5) 0 0 0
         assign (resid $resst5 and name CA  and segid $chain5)
                (resid $resen1 and name CA  and segid $chain1) 0 0 0

         assign (resid $resst5 and name CA  and segid $chain5)
                (resid $resen1 and name CA  and segid $chain1) 0 0 0
         assign (resid $resst1 and name CA  and segid $chain1)
                (resid $resen2 and name CA  and segid $chain2) 0 0 0
}
         assign (resid $resst1 and name CA  and segid $chain1)
                (resid $resst3 and name CA  and segid $chain3) 0 0 0
         assign (resid $resst1 and name CA  and segid $chain1)
                (resid $resst4 and name CA  and segid $chain4) 0 0 0

         assign (resid $resst2 and name CA  and segid $chain2)
                (resid $resst4 and name CA  and segid $chain4) 0 0 0
         assign (resid $resst2 and name CA  and segid $chain2)
                (resid $resst5 and name CA  and segid $chain5) 0 0 0

         assign (resid $resst3 and name CA  and segid $chain3)
                (resid $resst5 and name CA  and segid $chain5) 0 0 0
         assign (resid $resst3 and name CA  and segid $chain3)
                (resid $resst1 and name CA  and segid $chain1) 0 0 0

         assign (resid $resst4 and name CA  and segid $chain4)
                (resid $resst1 and name CA  and segid $chain1) 0 0 0
         assign (resid $resst4 and name CA  and segid $chain4)
                (resid $resst2 and name CA  and segid $chain2) 0 0 0

         assign (resid $resst5 and name CA  and segid $chain5)
                (resid $resst2 and name CA  and segid $chain2) 0 0 0
         assign (resid $resst5 and name CA  and segid $chain5)
                (resid $resst3 and name CA  and segid $chain3) 0 0 0

      end 

      evaluate ($icount = $icount + 2)
      evaluate ($i1start = $i1start + 2)
      evaluate ($i2start = $i2start + 2)
      evaluate ($i3start = $i3start + 2)
      evaluate ($i4start = $i4start + 2)
      evaluate ($i5start = $i5start + 2)

    end loop genc5sym

  end loop c5symloop


  noe
    potential  symm symmetry
    scale      symm $Data.ksym
    sqconstant symm 1.0
    sqexponent symm 2
    soexponent symm 1
    rswitch    symm 0.5
    sqoffset   symm 0.0
    asymptote  symm 1.0
  end
 
end if
