!$Revision: 1.3 $
!$Date: 2004/06/17 08:40:54 $
!$RCSfile: print_coorheader.cns,v $

! print_coorheader.cns
!     ************************************
!     * Authors and copyright:           *
!     * Michael Nilges, Jens Linge, EMBL *
!     * Adapted by Alexandre Bonvin      *
!     * Utrecht University               *
!     * No warranty implied or expressed *
!     * All rights reserved              *
!     ************************************


if ($Data.flags.dihed eq FALSE) then evaluate ($dihe = 0) end if
if ($Data.flags.sani  eq FALSE) then evaluate ($sani = 0) end if
if ($Data.flags.dani  eq FALSE) then evaluate ($dani = 0) end if
if ($Data.flags.coup  eq FALSE) then evaluate ($coup = 0) end if
if ($Data.flags.vean  eq FALSE) then evaluate ($vean = 0) end if
if ($Data.flags.cdih  eq FALSE) then evaluate ($cdih = 0) end if
if ($Data.flags.noe   eq FALSE) then evaluate ($noe  = 0) end if

evaluate($enerall=$etot)
evaluate($bondall=$bond)
evaluate($anglall=$angl)
evaluate($imprall=$impr)
evaluate($diheall=$dihe)
evaluate($vdwall=$vdw)
evaluate($elecall=$elec)
evaluate($noeall=$noe)
evaluate($cdihall=$cdih)
evaluate($coupall=$coup)
evaluate($saniall=$sani)
evaluate($veanall=$vean)
evaluate($daniall=$dani)

evaluate ($result=0)
evaluate ($violations=0)
print threshold=0.3 noe 
evaluate ($rms_noe=$result)
evaluate ($violations_noe=$violations)

if ($Data.noecv eq false) then
  evaluate ($violations_test_noe= 0)
  evaluate ($rms_test_noe = 0)
  evaluate ($npart = 0)
end if

evaluate ($result=0)
evaluate ($violations=0)
print threshold=5. cdih
evaluate ($rms_cdih=$result)
evaluate ($violations_cdih=$violations)
evaluate ($result=0)
print thres=0.05 bonds          
evaluate ($rms_bonds=$result)
evaluate ($result=0)
print thres=5. angles
evaluate ($rms_angles=$result)
evaluate ($result=0)
print thres=5. impropers
evaluate ($rms_impropers=$result)
evaluate ($result=0)
print thres=30. dihedrals 
evaluate ($rms_dihedrals=$result)
evaluate ($result=0)
evaluate ($violations=0)
coupl print thres=1.0 class * end
evaluate ($rms_coup = $result)
evaluate ($violations_coup = $violations)

evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc1 end
evaluate( $rms_sani = $result)
evaluate( $violations_sani = $violations)
evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc2 end
if ($result > 0) then
  evaluate( $rms_sani = (0.5 * $rms_sani) + (0.5 * $result))
end if
evaluate( $violations_sani = $violations_sani + $violations)
evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc3 end
if ($result > 0) then
  evaluate( $rms_sani = (0.5 * $rms_sani) + (0.5 * $result))
end if
evaluate( $violations_sani = $violations_sani + $violations)
evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc4 end
if ($result > 0) then
  evaluate( $rms_sani = (0.5 * $rms_sani) + (0.5 * $result))
end if
evaluate( $violations_sani = $violations_sani + $violations)
evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc5 end
if ($result > 0) then
  evaluate( $rms_sani = (0.5 * $rms_sani) + (0.5 * $result))
end if
evaluate( $violations_sani = $violations_sani + $violations)

if ($Data.flags.vean  eq TRUE) then
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea1 end
  evaluate( $rms_vean = $result)
  evaluate( $violations_vean = $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea2 end
  if ($result > 0) then
    evaluate( $rms_vean = (0.5 * $rms_vean) + (0.5 * $result))
  end if
  evaluate( $violations_vean = $violations_vean + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea3 end
  if ($result > 0) then
    evaluate( $rms_vean = (0.5 * $rms_vean) + (0.5 * $result))
  end if
  evaluate( $violations_vean = $violations_vean + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea4 end
  if ($result > 0) then
    evaluate( $rms_vean = (0.5 * $rms_vean) + (0.5 * $result))
  end if
  evaluate( $violations_vean = $violations_vean + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea5 end
  if ($result > 0) then
    evaluate( $rms_vean = (0.5 * $rms_vean) + (0.5 * $result))
  end if
  evaluate( $violations_vean = $violations_vean + $violations)
else
  evaluate( $rms_vean = 0)
  evaluate( $violations_vean = 0)
end if
  

if ($Data.flags.dani  eq TRUE) then
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan1 end
  evaluate( $rms_dani = $result)
  evaluate( $violations_dani = $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan2 end
  if ($result > 0) then
    evaluate( $rms_dani = (0.5 * $rms_dani) + (0.5 * $result))
  end if
  evaluate( $violations_dani = $violations_dani + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan3 end
  if ($result > 0) then
    evaluate( $rms_dani = (0.5 * $rms_dani) + (0.5 * $result))
  end if
  evaluate( $violations_dani = $violations_dani + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan4 end
  if ($result > 0) then
    evaluate( $rms_dani = (0.5 * $rms_dani) + (0.5 * $result))
  end if
  evaluate( $violations_dani = $violations_dani + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan5 end
  if ($result > 0) then
    evaluate( $rms_dani = (0.5 * $rms_dani) + (0.5 * $result))
  end if
  evaluate( $violations_dani = $violations_dani + $violations)
else
  evaluate( $rms_dani = 0)
  evaluate( $violations_dani = 0)
end if
  
{====>} {* define ASA-based solvation parameters *}
inline @def_solv_param.cns

{====>} {* buried surface area *}
evaluate ($nchain1 = 1)
evaluate ($saafree = 0)
while ($nchain1 <= $data.ncomponents) loop nloop1
  {====>} {* buried surface area *}
  do (rmsd = 0) (all)
  surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1 and not (resn TIP3 or resn DMS)) end
  show sum (rmsd) (segid $Toppar.prot_segid_$nchain1 and not (resn TIP3 or resn DMS))
  evaluate ($saafree = $saafree + $result)
  evaluate ($nchain1 = $nchain1 + 1)
end loop nloop1
     
do (rmsd = 0) (all)
do (store2 = 0) (all)
surface mode=access accu=0.075 rh2o=1.4 sele=(not (resn TIP3 or resn DMS)) end
show sum (rmsd) (not (resn TIP3 or resn DMS))
evaluate ($satot = $result)
do (store2 = rmsd * store1) (not (resn TIP3 or resn DMS))
show sum (store2) (not (resn TIP3 or resn DMS))
evaluate ($esolcplx = $result)
evaluate ($saburied = $saafree - $satot)
evaluate ($edesolv = $esolcplx - $esolfree)
evaluate ($dhbinding = $edesolv + $eintcplx - $eintfree + $elec + $vdw)
display COMPLEX dH OF BINDING = $dhbinding

if ($Data.flags.sym eq true) then
  evaluate ($enerall = $enerall + $esym)
end if
if ($Data.flags.ncs eq true) then
  evaluate ($enerall = $enerall + $ncs)
end if

if ($data.waterdock eq true) then
  ident (store3) (not all)
  flag exclude * include vdw elec  end
  
  eval($nchain1 = 0)
 
  while ($nchain1 < $data.ncomponents) loop nloop1
    eval($nchain1 = $nchain1 + 1)
   
    igroup
      interaction (segid $Toppar.prot_segid_$nchain1) (resn TIP3 and not store3) weight * 1.0 end
      interaction (not segid $Toppar.prot_segid_$nchain1) (resn TIP3) weight * 0.0 end
      interaction (segid $Toppar.prot_segid_$nchain1) (not (resn TIP3 and store3)) weight * 0.0 end
    end
    energy end
    evaluate ($ener_water_$nchain1 = $ener)
    evaluate ($enerall = $enerall + $ener)
    evaluate ($vdw_water_$nchain1 = $vdw)
    evaluate ($elec_water_$nchain1 = $elec)
   
  end loop nloop1
  if ($data.ncomponents < 6) then
    eval($nchain1 = $data.ncomponents)
    while ($nchain1 < 6) loop nloop1
      eval($nchain1 = $nchain1 + 1)
      evaluate ($ener_water_$nchain1 = 0.0)
      evaluate ($vdw_water_$nchain1 = 0.0)
      evaluate ($elec_water_$nchain1 = 0.0)
    end loop nloop1
  end if

  eval($nchain1 = 0)

  igroup
    while ($nchain1 < $data.ncomponents) loop nloop2
      eval($nchain1 = $nchain1 + 1)
      interaction (segid $Toppar.prot_segid_$nchain1) (all) weight * 0.0 end
    end loop nloop2
    interaction (resn TIP3 and not store3) (resn TIP3 and not store3)  weight * 1.0 end
    interaction (store3) (store3)  weight * 0.0 end
  end
  energy end
  evaluate ($ener_water_water = $ener)
  evaluate ($enerall = $enerall + $ener)
  evaluate ($vdw_water_water = $vdw)
  evaluate ($elec_water_water = $elec)
else
  eval($nchain1 = 0)

  while ($nchain1 < 6) loop nloop1
    eval($nchain1 = $nchain1 + 1)
    evaluate ($ener_water_$nchain1 = 0.0)
    evaluate ($vdw_water_$nchain1 = 0.0)
    evaluate ($elec_water_$nchain1 = 0.0)
  end loop nloop1
  evaluate ($ener_water_water = 0.0)
  evaluate ($vdw_water_water = 0.0)
  evaluate ($elec_water_water = 0.0)
end if


remarks =============================================================== 
remarks HADDOCK run for $filename
remarks =============================================================== 
remarks            total,bonds,angles,improper,dihe,vdw,elec,noe,cdih,coup,sani,vean,dani
remarks energies: $enerall, $bondall, $anglall, $imprall, $diheall, $vdwall, $elecall, $noeall, $cdihall, $coupall, $saniall, $veanall, $daniall
remarks =============================================================== 
remarks            bonds,angles,impropers,dihe,noe,cdih,coup,sani,vean,dani
remarks rms-dev.: $rms_bonds,$rms_angles,$rms_impropers,$rms_dihedrals,$rms_noe,$rms_cdih,$rms_coup, $rms_sani, $rms_vean, $rms_dani
remarks =============================================================== 
remarks               noe,cdih,coup,sani,vean,dani
remarks               >0.3,>5,>1,>0,>5,>0.2
remarks violations.: $violations_noe, $violations_cdih, $violations_coup, $violations_sani, $violations_vean, $violations_dani
remarks ===============================================================
remarks                        CVpartition#,violations,rms
remarks AIRs cross-validation: $npart, $violations_test_noe, $rms_test_noe
remarks ===============================================================
remarks NCS energy: $ncs
remarks ===============================================================
remarks Symmetry energy: $esym
remarks =============================================================== 
remarks Desolvation energy: $edesolv 
remarks Internal energy free molecules: $eintfree
remarks Internal energy complex: $eintcplx
remarks Binding energy: $dhbinding
remarks =============================================================== 
remarks buried surface area: $saburied
remarks =============================================================== 
remarks water - chain1: $ener_water_1 $vdw_water_1 $elec_water_1
remarks water - chain2: $ener_water_2 $vdw_water_2 $elec_water_2
remarks water - chain3: $ener_water_3 $vdw_water_3 $elec_water_3
remarks water - chain4: $ener_water_4 $vdw_water_4 $elec_water_4
remarks water - chain5: $ener_water_5 $vdw_water_5 $elec_water_5
remarks water - chain6: $ener_water_6 $vdw_water_6 $elec_water_6
remarks =============================================================== 
remarks water - water: $ener_water_water $vdw_water_water $elec_water_water
remarks =============================================================== 
